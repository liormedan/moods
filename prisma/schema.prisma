// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials provider
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  moodEntries       MoodEntry[]
  insights          Insight[]
  journalEntries    JournalEntry[]
  breathingSessions BreathingSession[]
  goals             Goal[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MoodEntry {
  id        String   @id @default(cuid())
  userId    String
  moodValue Int      // 1-10 scale
  notes     String?
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
}

model Insight {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "recommendation", "warning", "celebration", "pattern", "milestone"
  title       String
  description String
  priority    String   @default("medium") // "low", "medium", "high"
  actionable  Boolean  @default(false)
  expiresAt   DateTime?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JournalEntry {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String
  mood        Int?     // 1-10 scale, optional
  tags        String   // JSON array of tags
  template    String?  // Template ID used
  isFavorite  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
}

model BreathingSession {
  id           String   @id @default(cuid())
  userId       String
  exerciseId   String   // ID of the breathing exercise
  exerciseName String   // Name of the exercise for display
  duration     Int      // Total duration in seconds
  cycles       Int      // Number of breathing cycles completed
  inhaleTime   Int      // Inhale duration in seconds
  holdTime     Int      // Hold duration in seconds
  exhaleTime   Int      // Exhale duration in seconds
  completed    Boolean  @default(true) // Whether the session was completed
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
}

model Goal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String   @default("")
  category    String   // "mental-health", "physical", "social", "personal", "professional"
  targetDate  DateTime
  progress    Int      @default(0) // 0-100 percentage
  status      String   @default("not-started") // "not-started", "in-progress", "completed", "overdue"
  priority    String   @default("medium") // "low", "medium", "high"
  milestones  String   @default("[]") // JSON array of milestones
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([userId, status])
  @@index([userId, category])
}